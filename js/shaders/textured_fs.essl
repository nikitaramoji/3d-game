Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es
	precision highp float;

	out vec4 fragmentColor;
	in vec2 texCoord; // pass this on from vertex shader
	in vec4 worldPosition;
	in vec3 worldNormal;

	// we need to bind texture to this
	uniform sampler2D colorTexture;
	uniform struct {
		vec4 position[8];
		vec4 powerDensity[8];
	} lighting;
	uniform struct {
		float shininess;
		vec3 spectralColor;
		vec3 camPos;
	} matAttribs;

	void main(void) {
		fragmentColor = texture(colorTexture, texCoord);
		vec3 normal = normalize(worldNormal);
		vec3 lightPow = vec3(0,0,0);
		vec3 lightPowSpec = vec3(0,0,0);
		for(int i=0; i<2; i++) {
		  vec3 lightComp = lighting.position[i].xyz - (worldPosition.xyz*lighting.position[i].w);
		  float cos = dot(normal,normalize(lightComp));
		  vec3 h = normalize((matAttribs.camPos - worldPosition.xyz) + lightComp);
		  float cosDelta = pow(dot(h,normal),matAttribs.shininess);
		  lightPow += (lighting.powerDensity[i].rgb / (length(lightComp)*length(lightComp)))*cos;
		  lightPowSpec += (lighting.powerDensity[i].rgb / (length(lightComp)*length(lightComp)))*cosDelta;
		}
		fragmentColor.xyz = ((fragmentColor.xyz * lightPow) + (matAttribs.spectralColor.rgb * lightPowSpec))/2.0;
	  //fragmentColor = abs(vec4(worldNormal,1.0));
	}
`;
